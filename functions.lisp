(load "/Users/Ninjacop123/Desktop/OceanGame/pushpop.lisp")
(load "/Users/Ninjacop123/Desktop/OceanGame/flags.lisp")

(defun stats ()
  (format t "Health: ~A ~%~%" *health*))
(defun begin ()
  (setq *hunting* 1) (setq *inventory* 1) (setq *woodcutting* 1) (setq *mining* 1) (setq *health* 100) (setq *sewing* 1))
(defun toolinfo ()
  (if (and (>= (gethash 0 *minerals*) 2) (>= (gethash 0 *wood*) 4)) (setf (gethash 0 *toolkit*) 'axe) (remhash 0 *toolkit*))
  (if (and (>= (gethash 0 *wood*) 2) (>= (gethash 0 *cloth*) 3)) (setf (gethash 1 *toolkit*) 'fishing-rod) (remhash 1 *toolkit*))
  (if (>= (gethash 0 *flax*) 2) (setf (gethash 2 *toolkit*) 'cloth) (remhash 2 *toolkit*))
  (if (and (>= (gethash 0 *wood*) 100) (>= (gethash 0 *minerals*) 100)) (setf (gethash 3 *toolkit*) 'house) (remhash 3 *toolkit*))
  (if (>= (gethash 0 *cloth*) 4) (setf (gethash 4 *toolkit*) 'medkit) (remhash 4 *toolkit*))
  (if (>= (gethash 0 *wood*) 4) (setf (gethash 5 *toolkit*) 'spear) (remhash 5 *toolkit*))
  (if (and (>= (gethash 0 *wood*) 4) (>= (gethash 0 *minerals*) 2)) (setf (gethash 6 *toolkit*) 'pickaxe) (remhash 6 *toolkit*))
  (format t "You can make: ~A ~A ~A ~A ~A ~A ~A~%~%" (gethash 0 *toolkit*) (gethash 1 *toolkit*) (gethash 2 *toolkit*) (gethash 3 *toolkit*) (gethash 4 *toolkit*) (gethash 5 *toolkit*) (gethash 6 *toolkit*)))
(defun tut1 ()
  (format t "Well done! You have killed your first crab. ~%With that meat, you can cook it by typing in \"cook\" ~%Type \"showinv\" to view your inventory to move on to the next part of the tutorial ~%~%") (incf (gethash 0 *meat*) 2) (setq  *hunting*  1))
(defun tut2 ()
  (format t "Awesome job! ~%Now that you know how to access your inventory, why don't you collect some resources? ~%Type \"chop\" to gather some wood ~%~%") (setq  *inventory*  1))
(defun tut3 ()
  (format t "Great! ~%Now the  almost  final part before I'm out of your way: ~%Type \"mine\" to collect some minerals ~%Also, type \"findflax\" to find some flax, then type \"sew\" to make some cloth ~%") (incf (gethash 0 *wood*) 2) (setq *woodcutting* 1))
(defun tut4 ()
  (format t "Alright! ~%Lastly, type \"forage\" and \"eatberry or eatcrab\" to find and eat food, respectively. ~%Type \"makeaxe\" \"makepick\" \"makespear\" or \"makerod\" to make that item ~%Type \"toolinfo\" to see what items you can make ~%In addition, you can type \"stats\" ~%") (incf (gethash 0 *minerals*) 2) (setq *mining* 1))
(defun tut5 ()
  (format t "WELL hey! ~%You make a fishing rod! ~%You can type \"cast\" to cast the fishing rod, andd you may find something good!") (setq *fishing* 1))
(defun tut6 ()
  (format t "~%You seem to be hurt! ~%Until you make a medkit and type \"use-medkit\", you will take bleed damage ~%~%") (setq *hurt* t) (setq *blood* 1))
(defun tut7 ()
  (format t "~%You made a small field for crops next to your home! ~%To find seeds and plants crops, type \"findseeds\" and \"plant(1-10)\"~%"))
(defun fishingtut ()
    (format t "~%Type \"reel\" and \"cast\" to do those things with your new rod~%~%"))
(defun tutorial ()
  (format t "You landed on a deserted island with a few trees and lots of crabs. Type \"hunt\" to hunt some crabs ~%~%") (setq *health* 100))

(defun bleed ()
  (if (eq *hurt* nil) (progn (setq *bloodchance* (random 16))
    (if (and (eq *bloodchance* 7) (eq *blood* 0)) (tut6) (progn 
      (setq *hurt* t)
      (cond ((eq *hurt* t) (progn (format t "~%You are hurt!~%You lost 1 Health from bleeding! ~%~%~%") (setq *health* (- *health* 1))))
      ((eq *hurt* nil) (setq *bloodchance* 20))))))))

(defun findseeds ()
  (format t "~%You found some seeds for your crops!~%")
  (pushseeds))
(defun use-medkit ()
  (setq *hurt* nil)
  (format t "~%You have stopped the bleeding and gained +20 HP~%") 
  (setq *health* (+ *health* 20)))
(defun hunt ()
  (bleed)
  (if (eq  *hunting*  0) (tut1) (if (eq (gethash 5 *toolkit*) t) (progn (format t "~%You used the spear to hunt more crabs!~%") (pushraw) (pushraw) (pushraw) (pushraw) (pushraw)) (pushraw))))
(defun cook ()
  (if (>=  (gethash 0 *meat*)  2) (cookflag) (format t "You do not have enough crab meat!")))
(defun chop ()
  (bleed)
  (if (eq  *woodcutting*  0) (tut3) (if (eq (gethash 0 *toolkit*) t) (progn (format t "~%You used the axe to chop more wood!~%") (pushwood) (pushwood) (pushwood) (pushwood)) (pushwood))))
(defun mine ()
  (bleed)
  (if (eq  *mining*  0) (tut4) (if (eq (gethash 1 *toolkit*) t) (progn (format t "~%You used the pickaxe to mine more minerals!~%" (pushminerals) (pushminerals) (pushminerals) (pushminerals) (pushminerals) (pushminerals)) (pushminerals)))))
(defun forage ()
  (bleed)
  (pushberries))
(defun eat (x)
    (setq x (concatenate 'string x))
    (if (and (equal x "corn") (> *food* 0)) (progn (format t "~%You regained health after eating the corn!~% +5 Health~%") (setq *health* (+ *health* 5)) (decf (gethash 0 *food*) 1) ))
    (if (and (equal x "berries") (> *berries* 1)) (progn (format t "~%You regained health after eating the berries!~% +10 Health~%") (setq *health* (+ *health* 10)) (decf (gethash 0 *berries*) 2) ))
    (if (and (equal x "cooked-fish") (> *cookedfish* 1)) (progn (format t "~%You regained health after eating the cooked fish!~% +20 Health~%") (setq *health* (+ *health* 5)) (decf (gethash 0 *cookedfish*) 2) ))
    (if (and (equal x "cooked-crab") (> *cookedmeat* 1)) (progn (format t "~%You regained health after eating the cooked crab!~% +20 Health~%") (setq *health* (+ *health* 5)) (decf (gethash 0 *cookedmeat*) 2) (format t "~%You do not have enough raw")))
    (if (and (equal x "raw-fish") (> *fish* 1)) (progn (format t "~%You lost some health after eating the raw fish...~% -5 Health~%") (setq *health* (- *health* 5)) (decf (gethash 0 *fish*) 2) (format t "~%You do not have enough raw fish to eat!~%")))
    (if (and (equal x "raw-crab") (> *meat* 1)) (progn (format t "~%You lost some health after eating the raw crab...~% -5 Health~%") (setq *health* (- *health* 5))) (decf (gethash 0 *meat*) 2) (format t "~%You do not have enough raw crab to eat!~%")))
(defun makeaxe ()
  (if (and (>=  (gethash 0 *minerals*)  2) (>=  (gethash 0 *wood*)  4)) (axeflag) (format t "~%You do not have enough materials to make an axe! ~%wood Needed: ~A~% minerals Needed: ~A~%~%" (- (gethash 0 *wood*) 4) (- (gethash 0 *minerals*) 2))))
(defun makepick ()
  (if (and (>= (gethash 0 *minerals*) 2) (>= (gethash 0 *wood*) 4)) (pickflag) (format t "~%You do not have enough materials to make a pickaxe! ~%wood Needed: ~A~% minerals Needed: ~A~%~%" (- (gethash 0 *wood*) 4) (- (gethash 0 *minerals*) 2))))
(defun makespear ()
  (if (>= (gethash 0 *wood*) 4) (spearflag) (format t "~%You do not have enough materials to make a spear! ~%wood Needed: ~A~%~%" (- (gethash 0 *wood*) 4))))
(defun makerod () 
  (if (and (>= (gethash 0 *wood*) 2) (>= (gethash 0 *cloth*) 3)) (fishingtut) (format t "~%You do not have enough materials to make a fishing rod! ~% wood Needed: ~A~% cloth Needed: ~A~%%" (- (gethash 0 *wood*) 2) (- (gethash 0 *cloth*) 3))))
(defun findflax ()
  (bleed)
  (flaxflag))
(defun sew ()
  (bleed)
  (if (> (gethash 0 *flax*) 2) (clothflag) (format t "~%You do not have enough materials to make cloth! ~%flax needed: ~A~%~%" (- (gethash 0 *flax*) 2))))
(defun makehouse ()
  (bleed)
  (if (and (> (gethash 0 *wood*) 100) (> (gethash 0 *minerals*) 50) (houseflag) (format t "~%You do not have enough materials to make a house! ~%wood Needed: ~A~%minerals Needed: ~A~%~%" (- (gethash 0 *wood*) 100) (- (gethash 0 *minerals*))))))
(defun makekit ()
  (if (> (gethash 0 *cloth*) 4) (progn (decf (gethash 0 *cloth*) 4) (incf (gethash 0 *medkit*) 1)) (format t "~%You do not have enough materials to make a medkit! ~%cloth Needed: ~A~%~%" (- (gethash 0 *cloth*) 4))))

(defun debugg ()
    (incf (gethash 0 *wood*) 100000000)
    (incf (gethash 0 *minerals*) 100000000)
    (incf (gethash 0 *flax*) 100000000)
    (incf (gethash 0 *cloth*) 100000000))

(defun monopoly ()
  (loop 
    (setq r 1)
    (format t "~A capitalism" r)
    (format t " ~A overload    " r))
    (when (< r 10) (return r)))